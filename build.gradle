plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'maven-publish'
    id "eclipse"
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

group 'de.geolykt.starloader'
def archivesBaseName = 'launcher' // Note: publishing uses a different base name because reasons
version '20220625'

// Our classloader require Java9+ in order to work, but since noone should be using Java 9 and 10, it was bumped all the way to Java 11
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '11'

repositories {
    mavenCentral()
    maven {
        name = 'Geolykt'
        url = 'https://geolykt.de/maven/'
    }
}

sourceSets {
    bootstrap {
        ext.javaVersion = 8
        compileClasspath += sourceSets.main.runtimeClasspath
        runtimeClasspath += sourceSets.main.runtimeClasspath
    }
}

java {
    modularity.inferModulePath.set(true)
}

dependencies {

    // I am very well aware that this is just a reference implementation, but it has served me well in the past; so I prefer it over any other implementation
    // https://mvnrepository.com/artifact/org.json/json
    api 'org.json:json:20220320'

    implementation group: 'de.geolykt.starloader', name: 'tableLayout', version: '4.4.0'

    // https://mvnrepository.com/artifact/org.jetbrains/annotations
    api group: 'org.jetbrains', name: 'annotations', version: '23.0.0'

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    api 'com.google.code.gson:gson:2.8.9'

    // Required for mixins
    api 'com.google.guava:guava:30.1.1-jre'

    // Code modification
    api "org.ow2.asm:asm:9.3"
    api "org.ow2.asm:asm-tree:9.3"
    api "org.ow2.asm:asm-analysis:9.3"
    api "org.ow2.asm:asm-util:9.3"
    api "org.ow2.asm:asm-commons:9.3"
    api "de.geolykt.starloader:mixin:0.8.4"
    api "de.geolykt.starloader:access-widener:2.1.0"

    // Logging
    // SLF4J is the base logger for most libraries, therefore we should provide integration to it
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    api 'org.slf4j:slf4j-api:2.0.0-alpha7'

    // https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
    // recaf's attach (which I use to inspect bytecode) breaks on slf4j-simple, so we are using logback in the meantime
    // We formerly used Log4J, so eventually we should go back to it as we still package the config files for it
    implementation 'ch.qos.logback:logback-classic:1.3.0-alpha16'
    implementation 'ch.qos.logback:logback-core:1.3.0-alpha16'
    // api 'org.slf4j:slf4j-simple:2.0.0-alpha5'
}

jar {
    manifest {
        attributes 'Multi-Release': true
    }
}

shadowJar {
    mergeServiceFiles()
    from sourceSets.main.output, sourceSets.bootstrap.output
}

shadowJar.dependsOn(bootstrapClasses)

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource, sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        plugin(MavenPublication) { publication ->
            groupId project.group
            artifactId 'launcher'
            version project.version

            from components['java']

            artifact sourcesJar
            artifact javadocJar
        }
    }
    repositories {
        mavenLocal()
    }
}

project.sourceSets.each { set -> {
    if (set.ext.has("javaVersion")) {
        project.tasks[set.compileJavaTaskName].sourceCompatibility = set.ext.javaVersion
        project.tasks[set.compileJavaTaskName].targetCompatibility = set.ext.javaVersion
        project.tasks[set.compileJavaTaskName].javaCompiler = javaToolchains.compilerFor {
            languageVersion = JavaLanguageVersion.of(set.ext.javaVersion)
        }
    }
}}

